Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:

Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
Example 2:

Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]

Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]
 

Note:

The number of elements of the given matrix will not exceed 10,000.
There are at least one 0 in the given matrix.
The cells are adjacent in only four directions: up, down, left and right.


code:
class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        if not len(matrix) or not len(matrix[0]):
            return []
        
        queue = collections.deque()
        
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == 0:
                    queue.append((i, j, 0))
                else:
                    matrix[i][j] = -1
        
        while queue:
            x, y, distance = queue.popleft()
            
            for direct in [(0,1),(0,-1),(1,0),(-1,0)]:
                x_ = direct[0] + x
                y_ = direct[1] + y
                
                if self.is_valid(matrix, x_, y_):
                    matrix[x_][y_] = distance + 1
                    queue.append((x_,y_,distance + 1))
        
        return matrix
    
    def is_valid(self, matrix, x, y):
        if x < 0 or y < 0 or x >= len(matrix) or y >= len(matrix[0]):
            return False
        
        if matrix[x][y] != -1:
            return False
        
        return True
        
